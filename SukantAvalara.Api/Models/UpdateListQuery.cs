/*
 * ToDo API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace SukantAvalara.Api.Domain
{ 
    /// <summary>
    /// Either CurrentName or Guid or both can be entered
    /// </summary>
    [DataContract]
    public partial class UpdateListQuery : IEquatable<UpdateListQuery>
    { 
        /// <summary>
        /// Gets or Sets CurrentName
        /// </summary>

        [DataMember(Name="CurrentName")]
        public string CurrentName { get; set; }

        /// <summary>
        /// Gets or Sets Guid
        /// </summary>

        [DataMember(Name="Guid")]
        public string Id { get; set; }

        [DataMember(Name="NewName")]
        public string NewName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateListQuery {\n");
            sb.Append("  CurrentName: ").Append(CurrentName).Append("\n");
            sb.Append("  Guid: ").Append(Id).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UpdateListQuery)obj);
        }

        /// <summary>
        /// Returns true if UpdateListQuery instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateListQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateListQuery other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CurrentName == other.CurrentName ||
                    CurrentName != null &&
                    CurrentName.Equals(other.CurrentName)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) &&
                (
                    NewName == other.NewName ||
                    NewName != null &&
                    NewName.Equals(other.NewName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CurrentName != null)
                    hashCode = hashCode * 59 + CurrentName.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (NewName != null)
                    hashCode = hashCode * 59 + NewName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UpdateListQuery left, UpdateListQuery right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UpdateListQuery left, UpdateListQuery right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
